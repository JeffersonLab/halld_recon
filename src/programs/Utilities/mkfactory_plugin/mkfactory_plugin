#!/usr/bin/env perl

use File::Copy;

# Get Plugin name or print Usage statement if no arguments
if($#ARGV < 0){
	&Usage();
	exit;
}else{
	$pluginname = $ARGV[0];
}

print "\n";
print "Generating files for factory plugin $pluginname ";

# Get Data class name
if($#ARGV >= 1){
	$classname = $ARGV[1];
	print "with class $classname ";
}else{
	$classname = $pluginname;
}

# Get tag (if any)
$USE_TAG = 0;
if($#ARGV >= 2){
	$tag = $ARGV[2];
	$USE_TAG = 1;
	$tag_suffix = "_${tag}";
	print "with tag $tag ";
}
print "....\n";

# Create directory to hold source
mkdir($pluginname);

# Create C++ Header File for Data Class
$dhfile = $fname = "${classname}.h";
open(FILE,">$pluginname/$dhfile");
&PrintFileHeader();
&PrintDataClass();
close(FILE);
print " - $dhfile\n";

# Create C++ Header File for Factory Class
$dhfile = $fname = "${classname}_factory${tag_suffix}.h";
open(FILE,">$pluginname/$dhfile");
&PrintFileHeader();
&PrintFactoryClass();
close(FILE);
print " - $dhfile\n";

# Create C++ Implementation file for Factory Class
$ccfile = $fname = "${classname}_factory${tag_suffix}.cc";
open(FILE,">$pluginname/$ccfile");
&PrintFileHeader();
&PrintFactoryMethods();
close(FILE);
print " - $ccfile\n";

# Copy SConstruct file
&CopySConstruct();
print " - SConstruct\n";

###############
# PrintFileHeader
###############
sub PrintFileHeader()
{
	# print a few lines at the very top of the file
	$uname = `uname -nprs`;
	chomp($uname);
	print FILE "// \$Id\$\n";
	print FILE "//\n";
	print FILE "//    File: $fname\n";
	print FILE "// Created: ".`date`;
	print FILE "// Creator: ".$ENV{"USER"}." (on $uname)\n";
	print FILE "//\n";
}


###############
# PrintDataClass
###############
sub PrintDataClass()
{
	# perl doesn't respect scope unless explicitly told to. Hence,
	# all variables (like FILE and $classname) are global.

	$content = "
/// For more information on the syntax changes between JANA1 and JANA2, visit: https://jeffersonlab.github.io/JANA2/#/jana1to2/jana1-to-jana2


#ifndef _${classname}_h_
#define _${classname}_h_

#include <JANA/JObject.h>

/// JObjects are plain-old data containers for inputs, intermediate results, and outputs.
/// They have member functions for introspection and maintaining associations with other JObjects, but
/// all of the numerical code which goes into their creation should live in a JFactory instead.
/// You are allowed to include STL containers and pointers to non-POD datatypes inside your JObjects,
/// however, it is highly encouraged to keep them flat and include only primitive datatypes if possible.
/// Think of a JObject as being a row in a database table, with event number as an implicit foreign key.

struct ${classname} : public JObject {
    int x;     // Pixel coordinates centered around 0,0
    int y;     // Pixel coordinates centered around 0,0
    double E;  // Energy loss in GeV
    double t;  // Time in ms


    /// Make it convenient to construct one of these things
    ${classname}(int x, int y, double E, double t) : x(x), y(y), E(E), t(t) {}


    /// Override className to tell JANA to store the exact name of this class where we can
    /// access it at runtime. JANA provides a NAME_OF_THIS macro so that this will return the correct value
    /// even if you rename the class using automatic refactoring tools.

    const std::string className() const override {
        return NAME_OF_THIS;
    }

    /// Override Summarize to tell JANA how to produce a convenient string representation for our JObject.
    /// This can be used called from user code, but also lets JANA automatically inspect its own data. For instance,
    /// adding JCsvWriter<Hit> will automatically generate a CSV file containing each hit. Warning: This is obviously
    /// slow, so use this for debugging and monitoring but not inside the performance critical code paths.

    void Summarize(JObjectSummary& summary) const override {
        summary.add(x, NAME_OF(x), \"%d\", \"Pixel coordinates centered around 0,0\");
        summary.add(y, NAME_OF(y), \"%d\", \"Pixel coordinates centered around 0,0\");
        summary.add(E, NAME_OF(E), \"%f\", \"Energy loss in GeV\");
        summary.add(t, NAME_OF(t), \"%f\", \"Time in ms\");
    }
};


#endif // _${classname}_h_

";
	print FILE $content;
	
}

###############
# PrintFactoryClass
###############
sub PrintFactoryClass()
{
	$content = "
/// For more information on the syntax changes between JANA1 and JANA2, visit: https://jeffersonlab.github.io/JANA2/#/jana1to2/jana1-to-jana2


\#ifndef _${classname}_factory${tag_suffix}_
\#define _${classname}_factory${tag_suffix}_

\#include <JANA/JFactoryT.h>
\#include \"${classname}.h\"

class ${classname}_factory${tag_suffix}:public JFactoryT<${classname}>{
	public:
		${classname}_factory${tag_suffix}(){
			SetTag(\"${tag_suffix}\");
		}
		~${classname}_factory${tag_suffix}(){}
";

	$content .=	"

	private:
		void Init() override;                       ///< Called once at program start.
		void BeginRun(const std::shared_ptr<const JEvent>& event) override; ///< Called everytime a new run number is detected.
		void Process(const std::shared_ptr<const JEvent>& event) override;  ///< Called every event.
		void EndRun() override;                     ///< Called everytime run number changes, provided BeginRun has been called.
		void Finish() override;                     ///< Called after last event of last event source has been processed.

};

\#endif // _${classname}_factory${tag_suffix}_

";
	print FILE $content;
	
}

###############
# PrintFactoryMethods
###############
sub PrintFactoryMethods()
{
	$content = "
/// For more information on the syntax changes between JANA1 and JANA2, visit: https://jeffersonlab.github.io/JANA2/#/jana1to2/jana1-to-jana2

\#include <iostream>
\#include <iomanip>

\#include \"${classname}_factory${tag_suffix}.h\"

// Routine used to create our JEventProcessor
\#include \<JANA/JApplication.h\>
\#include \<JANA/JFactoryGenerator.h\>
\#include \<JANA/JEvent.h\>

extern \"C\"{
void InitPlugin(JApplication *app){
	InitJANAPlugin(app);
	app->Add(new JFactoryGeneratorT<${classname}_factory${tag_suffix}>());
}
} // \"C\"

//------------------
// Init
//------------------
void ${classname}_factory${tag_suffix}::Init()
{
	auto app = GetApplication();
    
    /// Acquire any parameters
    // app->GetParameter(\"parameter_name\", m_destination);
    
    /// Set any factory flags
    // SetFactoryFlag(JFactory_Flags_t::NOT_OBJECT_OWNER);
}

//------------------
// BeginRun
//------------------
void ${classname}_factory${tag_suffix}::BeginRun(const std::shared_ptr<const JEvent>& event)
{
}

//------------------
// Process
//------------------
void ${classname}_factory${tag_suffix}::Process(const std::shared_ptr<const JEvent>& event)
{

	// Code to generate factory data goes here. Add it like:
	//
	// ${classname} *my${classname} = new ${classname};
	// my${classname}->x = x;
	// my${classname}->y = y;
	// ...
	// Insert(my${classname});
	// For whole collection
	// Use Set like this
	// std::vector<fac1*> results;
    // results.push_back(new fac1(...));
    // Set(results);
	// Note that the objects you create here will be deleted later
	// by the system and the mData vector will be cleared automatically.

}

//------------------
// EndRun
//------------------
void ${classname}_factory${tag_suffix}::EndRun()
{
}

//------------------
// Finish
//------------------
void ${classname}_factory${tag_suffix}::Finish()
{
}

";
	print FILE $content;
	
}


###############
# CopySConstruct
###############
sub CopySConstruct()
{
	# For now, just make a straight copy. In the future
	# the ability to remove ROOT and/or use a JANA
	# installed version of may be added back.

	#$PACKAGES = $JANA_IMPLEMENTATION;
	#if(!$NO_ROOT){ $PACKAGES .= ":ROOT"; }

	$from = $ENV{"HALLD_RECON_HOME"} . "/src/SBMS/SConstruct.plugin";
	$to = "./${pluginname}/SConstruct";
	copy($from, $to) or die ("copy failed $! -- $?");
}

###############
# Usage
###############
sub Usage()
{
	print "\n";
	print "Usage:\n\t mkfactory_plugin plugin_name [class [tag]]\n";
	print "\n";
	print "Generate the C++ source and header files to implement a new\n";
	print "plugin for use with the JANA framework. The plugin will implement\n";
	print "a factory (complete with factory generator). To generate a similar\n";
	print "skeleton plugin, but with a JEventProcessor instead of a JFactory,\n";
	print "then see \"mkplugin\".\n";
	print "\n";
	print "This will create a directory and generate a few files in it, including\n";
	print "a default Makefile so that one can use to immediately compile the new plugin.\n";
	print "\n";
	print "The C++ files generated will define classes based on JFactory,\n";
	print "JFactoryGenerator, and JObject. The \"plugin_name\" parameter specifies\n";
	print "the plugin name (which is also used as the name of the directory created).\n";
	print "\n";	
	print "If the \"class\" parameter is supplied, it will be\n";
	print "used as the name of the data class supplied by the\n";
	print "factory. Otherwise, the plugin name is used. If the\n";
	print "\"tag\" parameter is supplied, then it is used as the\n";
	print "factory tag. Otherwise, no tag is used.\n";
	print "\n";
	print "Other scripts are available for producing templates of\n";
	print "other types of JANA classes including:\n";
	print "\n";
	print "	mkclass\n";
	print "	mkprocessor\n";
	print "	mkfactory\n";
	print "	mkfactory_generator\n";
	print "	mkeventsource\n";
	print "	mkplugin\n";
	print "	mkfactory_plugin\n";
	print "\n";
	print "\n";
	print "\n";
}