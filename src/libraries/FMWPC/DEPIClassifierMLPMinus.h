// Class: ReadMLPMinus
// Automatically generated by MethodBase::MakeClass
//

/* configuration options =====================================================

#GEN -*-*-*-*-*-*-*-*-*-*-*- general info -*-*-*-*-*-*-*-*-*-*-*-

Method         : MLP::MLP
TMVA Release   : 4.2.1         [262657]
ROOT Release   : 6.24/06       [399366]
Creator        : andrew
Date           : Mon Mar  7 18:40:56 2022
Host           : Darwin Andrews-MacBook-Air.local 20.6.0 Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64 x86_64
Dir            : /Volumes/Backup Plus/ROOT_Trees/SingleTrack/2022FCALCor
Training events: 40000
Analysis type  : [Classification]


#OPT -*-*-*-*-*-*-*-*-*-*-*-*- options -*-*-*-*-*-*-*-*-*-*-*-*-

# Set by User:
NCycles: "600" [Number of training cycles]
HiddenLayers: "N+5" [Specification of hidden layer architecture]
NeuronType: "tanh" [Neuron activation function type]
V: "False" [Verbose output (short form of "VerbosityLevel" below - overrides the latter one)]
VarTransform: "N" [List of variable transformations performed before training, e.g., "D_Background,P_Signal,G,N_AllClasses" for: "Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)"]
H: "True" [Print method-specific help message]
TestRate: "5" [Test for overtraining performed at each #th epochs]
UseRegulator: "False" [Use regulator to avoid over-training]
# Default:
RandomSeed: "1" [Random seed for initial synapse weights (0 means unique seed for each run; default value '1')]
EstimatorType: "CE" [MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood]
NeuronInputType: "sum" [Neuron input function type]
VerbosityLevel: "Default" [Verbosity level]
CreateMVAPdfs: "False" [Create PDFs for classifier outputs (signal and background)]
IgnoreNegWeightsInTraining: "False" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]
TrainingMethod: "BP" [Train with Back-Propagation (BP), BFGS Algorithm (BFGS), or Genetic Algorithm (GA - slower and worse)]
LearningRate: "2.000000e-02" [ANN learning rate parameter]
DecayRate: "1.000000e-02" [Decay rate for learning parameter]
EpochMonitoring: "False" [Provide epoch-wise monitoring plots according to TestRate (caution: causes big ROOT output file!)]
Sampling: "1.000000e+00" [Only 'Sampling' (randomly selected) events are trained each epoch]
SamplingEpoch: "1.000000e+00" [Sampling is used for the first 'SamplingEpoch' epochs, afterwards, all events are taken for training]
SamplingImportance: "1.000000e+00" [ The sampling weights of events in epochs which successful (worse estimator than before) are multiplied with SamplingImportance, else they are divided.]
SamplingTraining: "True" [The training sample is sampled]
SamplingTesting: "False" [The testing sample is sampled]
ResetStep: "50" [How often BFGS should reset history]
Tau: "3.000000e+00" [LineSearch "size step"]
BPMode: "sequential" [Back-propagation learning mode: sequential or batch]
BatchSize: "-1" [Batch size: number of events/batch, only set if in Batch Mode, -1 for BatchSize=number_of_events]
ConvergenceImprove: "1.000000e-30" [Minimum improvement which counts as improvement (<0 means automatic convergence check is turned off)]
ConvergenceTests: "-1" [Number of steps (without improvement) required for convergence (<0 means automatic convergence check is turned off)]
UpdateLimit: "10000" [Maximum times of regulator update]
CalculateErrors: "False" [Calculates inverse Hessian matrix at the end of the training to be able to calculate the uncertainties of an MVA value]
WeightRange: "1.000000e+00" [Take the events for the estimator calculations from small deviations from the desired value to large deviations only over the weight range]
##


#VAR -*-*-*-*-*-*-*-*-*-*-*-* variables *-*-*-*-*-*-*-*-*-*-*-*-

NVar 3
EoverP_minus                  EoverP_minus                  EoverP_minus                  Electron FCAL Energy/KinFit momentum magnitudeF                                 'F'    [0,16.4249000549]
FCAL_DOCA_em                  FCAL_DOCA_em                  FCAL_DOCA_em                  Electron FCAL DOCA            F                                 'F'    [0.0115333553404,999]
FCAL_E9E25_em                 FCAL_E9E25_em                 FCAL_E9E25_em                 Electron E9/E25 shower ratio  F                                 'F'    [0,1]
NSpec 66
RFTime_kin                    RFTime_kin                    RFTime_kin                    RFTime_kin                                                      'F'    [-67.0731277466,71.4249572754]
RFTime_meas                   RFTime_meas                   RFTime_meas                   RFTime_meas                                                     'F'    [-67.0731277466,71.4249572754]
BeamX4_kin_T                  BeamX4_kin_T                  BeamX4_kin_T                  BeamX4_kin_T                                                    'F'    [-62.0222663879,69.0186309814]
BeamX4_kin_X                  BeamX4_kin_X                  BeamX4_kin_X                  BeamX4_kin_X                                                    'F'    [-24.3539218903,2.50310111046]
BeamX4_kin_Y                  BeamX4_kin_Y                  BeamX4_kin_Y                  BeamX4_kin_Y                                                    'F'    [-12.0318441391,1.92934143543]
BeamX4_kin_Z                  BeamX4_kin_Z                  BeamX4_kin_Z                  BeamX4_kin_Z                                                    'F'    [-291.736877441,146.599517822]
BeamX4_meas_T                 BeamX4_meas_T                 BeamX4_meas_T                 BeamX4_meas_T                                                   'F'    [-62.0242805481,69.0386657715]
BeamX4_meas_X                 BeamX4_meas_X                 BeamX4_meas_X                 BeamX4_meas_X                                                   'F'    [-17.3698863983,47.8415527344]
BeamX4_meas_Y                 BeamX4_meas_Y                 BeamX4_meas_Y                 BeamX4_meas_Y                                                   'F'    [-23.9840908051,20.307723999]
BeamX4_meas_Z                 BeamX4_meas_Z                 BeamX4_meas_Z                 BeamX4_meas_Z                                                   'F'    [34.7586288452,278.188903809]
BeamP4_kin_E                  BeamP4_kin_E                  BeamP4_kin_E                  BeamP4_kin_E                                                    'F'    [8.12142276764,8.87951755524]
BeamP4_kin_X                  BeamP4_kin_X                  BeamP4_kin_X                  BeamP4_kin_X                                                    'F'    [0,0]
BeamP4_kin_Y                  BeamP4_kin_Y                  BeamP4_kin_Y                  BeamP4_kin_Y                                                    'F'    [0,0]
BeamP4_kin_Z                  BeamP4_kin_Z                  BeamP4_kin_Z                  BeamP4_kin_Z                                                    'F'    [8.12142276764,8.87951755524]
BeamP4_meas_E                 BeamP4_meas_E                 BeamP4_meas_E                 BeamP4_meas_E                                                   'F'    [8.12142276764,8.87951755524]
BeamP4_meas_X                 BeamP4_meas_X                 BeamP4_meas_X                 BeamP4_meas_X                                                   'F'    [0,0]
BeamP4_meas_Y                 BeamP4_meas_Y                 BeamP4_meas_Y                 BeamP4_meas_Y                                                   'F'    [0,0]
BeamP4_meas_Z                 BeamP4_meas_Z                 BeamP4_meas_Z                 BeamP4_meas_Z                                                   'F'    [8.12142276764,8.87951755524]
TargetCenter_Z                TargetCenter_Z                TargetCenter_Z                TargetCenter_Z                                                  'F'    [65.2040023804,65.2040023804]
TargetCenter_X                TargetCenter_X                TargetCenter_X                TargetCenter_X                                                  'F'    [0,0]
TargetCenter_Y                TargetCenter_Y                TargetCenter_Y                TargetCenter_Y                                                  'F'    [0,0]
kinfit_chisq                  kinfit_chisq                  kinfit_chisq                  kinfit_chisq                                                    'F'    [3.33634034178e-06,13.8012132645]
FCAL_Energy_ep                FCAL_Energy_ep                FCAL_Energy_ep                FCAL_Energy_ep                                                  'F'    [0,8.58486557007]
TOF_dEdx_ep                   TOF_dEdx_ep                   TOF_dEdx_ep                   TOF_dEdx_ep                                                     'F'    [0.000372448790586,0.0217945110053]
FDC_dEdx_ep                   FDC_dEdx_ep                   FDC_dEdx_ep                   FDC_dEdx_ep                                                     'F'    [0,8.75832211022e-06]
ep_p_kin_E                    ep_p_kin_E                    ep_p_kin_E                    ep_p_kin_E                                                      'F'    [0.393556147814,8.21777629852]
ep_p_kin_X                    ep_p_kin_X                    ep_p_kin_X                    ep_p_kin_X                                                      'F'    [-1.06451427937,1.02062118053]
ep_p_kin_Y                    ep_p_kin_Y                    ep_p_kin_Y                    ep_p_kin_Y                                                      'F'    [-0.959725320339,0.969426393509]
ep_p_kin_Z                    ep_p_kin_Z                    ep_p_kin_Z                    ep_p_kin_Z                                                      'F'    [0.358597010374,8.20692062378]
ep_p_meas_E                   ep_p_meas_E                   ep_p_meas_E                   ep_p_meas_E                                                     'F'    [0.397058367729,10.6730670929]
ep_p_meas_X                   ep_p_meas_X                   ep_p_meas_X                   ep_p_meas_X                                                     'F'    [-1.06282114983,0.978603720665]
ep_p_meas_Y                   ep_p_meas_Y                   ep_p_meas_Y                   ep_p_meas_Y                                                     'F'    [-0.96657782793,0.956274688244]
ep_p_meas_Z                   ep_p_meas_Z                   ep_p_meas_Z                   ep_p_meas_Z                                                     'F'    [0.358294695616,10.6672744751]
FCAL_Energy_em                FCAL_Energy_em                FCAL_Energy_em                FCAL_Energy_em                                                  'F'    [0,8.77002429962]
TOF_dEdx_em                   TOF_dEdx_em                   TOF_dEdx_em                   TOF_dEdx_em                                                     'F'    [0.000377594522433,0.0527317337692]
FDC_dEdx_em                   FDC_dEdx_em                   FDC_dEdx_em                   FDC_dEdx_em                                                     'F'    [0,8.4884768512e-06]
em_p_kin_E                    em_p_kin_E                    em_p_kin_E                    em_p_kin_E                                                      'F'    [0.304527819157,8.2284412384]
em_p_kin_X                    em_p_kin_X                    em_p_kin_X                    em_p_kin_X                                                      'F'    [-0.852954685688,1.04519808292]
em_p_kin_Y                    em_p_kin_Y                    em_p_kin_Y                    em_p_kin_Y                                                      'F'    [-1.13274860382,0.981797993183]
em_p_kin_Z                    em_p_kin_Z                    em_p_kin_Z                    em_p_kin_Z                                                      'F'    [0.269232004881,8.21613693237]
em_p_meas_E                   em_p_meas_E                   em_p_meas_E                   em_p_meas_E                                                     'F'    [0.295248746872,10.6871852875]
em_p_meas_X                   em_p_meas_X                   em_p_meas_X                   em_p_meas_X                                                     'F'    [-0.9158462286,1.04882192612]
em_p_meas_Y                   em_p_meas_Y                   em_p_meas_Y                   em_p_meas_Y                                                     'F'    [-1.08533978462,1.05918622017]
em_p_meas_Z                   em_p_meas_Z                   em_p_meas_Z                   em_p_meas_Z                                                     'F'    [0.259001195431,10.6707229614]
g_p_kin_E                     g_p_kin_E                     g_p_kin_E                     g_p_kin_E                                                       'F'    [1,1]
g_p_kin_X                     g_p_kin_X                     g_p_kin_X                     g_p_kin_X                                                       'F'    [1,1]
g_p_kin_Y                     g_p_kin_Y                     g_p_kin_Y                     g_p_kin_Y                                                       'F'    [1,1]
g_p_kin_Z                     g_p_kin_Z                     g_p_kin_Z                     g_p_kin_Z                                                       'F'    [1,1]
g_p_meas_E                    g_p_meas_E                    g_p_meas_E                    g_p_meas_E                                                      'F'    [1,1]
g_p_meas_X                    g_p_meas_X                    g_p_meas_X                    g_p_meas_X                                                      'F'    [1,1]
g_p_meas_Y                    g_p_meas_Y                    g_p_meas_Y                    g_p_meas_Y                                                      'F'    [1,1]
g_p_meas_Z                    g_p_meas_Z                    g_p_meas_Z                    g_p_meas_Z                                                      'F'    [1,1]
DecayingPi0_p_kin_E           DecayingPi0_p_kin_E           DecayingPi0_p_kin_E           DecayingPi0_p_kin_E                                             'F'    [1,1]
DecayingPi0_p_kin_X           DecayingPi0_p_kin_X           DecayingPi0_p_kin_X           DecayingPi0_p_kin_X                                             'F'    [1,1]
DecayingPi0_p_kin_Y           DecayingPi0_p_kin_Y           DecayingPi0_p_kin_Y           DecayingPi0_p_kin_Y                                             'F'    [1,1]
DecayingPi0_p_kin_Z           DecayingPi0_p_kin_Z           DecayingPi0_p_kin_Z           DecayingPi0_p_kin_Z                                             'F'    [1,1]
DecayingPi0_p_meas_E          DecayingPi0_p_meas_E          DecayingPi0_p_meas_E          DecayingPi0_p_meas_E                                            'F'    [1,1]
DecayingPi0_p_meas_X          DecayingPi0_p_meas_X          DecayingPi0_p_meas_X          DecayingPi0_p_meas_X                                            'F'    [1,1]
DecayingPi0_p_meas_Y          DecayingPi0_p_meas_Y          DecayingPi0_p_meas_Y          DecayingPi0_p_meas_Y                                            'F'    [1,1]
DecayingPi0_p_meas_Z          DecayingPi0_p_meas_Z          DecayingPi0_p_meas_Z          DecayingPi0_p_meas_Z                                            'F'    [1,1]
Energy_UnusedShowers          Energy_UnusedShowers          Energy_UnusedShowers          Energy_UnusedShowers                                            'F'    [0,4.88779592514]
EoverP_plus                   EoverP_plus                   EoverP_plus                   EoverP_plus                                                     'F'    [0,12.2184658051]
FCAL_DOCA_ep                  FCAL_DOCA_ep                  FCAL_DOCA_ep                  FCAL_DOCA_ep                                                    'F'    [0.0169768221676,999]
FCAL_E9E25_ep                 FCAL_E9E25_ep                 FCAL_E9E25_ep                 FCAL_E9E25_ep                                                   'F'    [0,1]
ep_phi                        ep_phi                        ep_phi                        ep_phi                                                          'F'    [-3.14154982567,3.14105963707]
em_phi                        em_phi                        em_phi                        em_phi                                                          'F'    [-3.14133954048,3.14107728004]


============================================================================ */

#include <array>
#include <vector>
#include <cmath>
#include <string>
#include <iostream>

#ifndef IClassifierReader__def
#define IClassifierReader__def

class IClassifierReader {

 public:

   // constructor
   IClassifierReader() : fStatusIsClean( true ) {}
   virtual ~IClassifierReader() {}

   // return classifier response
   virtual double GetMvaValue( const std::vector<double>& inputValues ) const = 0;

   // returns classifier status
   bool IsStatusClean() const { return fStatusIsClean; }

 protected:

   bool fStatusIsClean;
};

#endif

class ReadMLPMinus : public IClassifierReader {

 public:

   // constructor
   ReadMLPMinus( std::vector<std::string>& theInputVars )
      : IClassifierReader(),
        fClassName( "ReadMLPMinus" ),
        fNvars( 3 )
   {
      // the training input variables
      const char* inputVars[] = { "EoverP_minus", "FCAL_DOCA_em", "FCAL_E9E25_em" };

      // sanity checks
      if (theInputVars.size() <= 0) {
         std::cout << "Problem in class \"" << fClassName << "\": empty input vector" << std::endl;
         fStatusIsClean = false;
      }

      if (theInputVars.size() != fNvars) {
         std::cout << "Problem in class \"" << fClassName << "\": mismatch in number of input values: "
                   << theInputVars.size() << " != " << fNvars << std::endl;
         fStatusIsClean = false;
      }

      // validate input variables
      for (size_t ivar = 0; ivar < theInputVars.size(); ivar++) {
         if (theInputVars[ivar] != inputVars[ivar]) {
            std::cout << "Problem in class \"" << fClassName << "\": mismatch in input variable names" << std::endl
                      << " for variable [" << ivar << "]: " << theInputVars[ivar].c_str() << " != " << inputVars[ivar] << std::endl;
            fStatusIsClean = false;
         }
      }

      // initialize min and max vectors (for normalisation)
      fVmin[0] = -1;
      fVmax[0] = 1;
      fVmin[1] = -1;
      fVmax[1] = 0.99999988079071;
      fVmin[2] = -1;
      fVmax[2] = 1;

      // initialize input variable types
      fType[0] = 'F';
      fType[1] = 'F';
      fType[2] = 'F';

      // initialize constants
      Initialize();

      // initialize transformation
      InitTransform();
   }

   // destructor
   virtual ~ReadMLPMinus() {
      Clear(); // method-specific
   }

   // the classifier response
   // "inputValues" is a vector of input values in the same order as the
   // variables given to the constructor
   double GetMvaValue( const std::vector<double>& inputValues ) const override;

 private:

   // method-specific destructor
   void Clear();

   // input variable transformation

   double fOff_1[3][3];
   double fScal_1[3][3];
   void InitTransform_1();
   void Transform_1( std::vector<double> & iv, int sigOrBgd ) const;
   void InitTransform();
   void Transform( std::vector<double> & iv, int sigOrBgd ) const;

   // common member variables
   const char* fClassName;

   const size_t fNvars;
   size_t GetNvar()           const { return fNvars; }
   char   GetType( int ivar ) const { return fType[ivar]; }

   // normalisation of input variables
   double fVmin[3];
   double fVmax[3];
   double NormVariable( double x, double xmin, double xmax ) const {
      // normalise to output range: [-1, 1]
      return 2*(x - xmin)/(xmax - xmin) - 1.0;
   }

   // type of input variable: 'F' or 'I'
   char   fType[3];

   // initialize internal variables
   void Initialize();
   double GetMvaValue__( const std::vector<double>& inputValues ) const;

   // private members (method specific)

   double ActivationFnc(double x) const;
   double OutputActivationFnc(double x) const;

   double fWeightMatrix0to1[9][4];   // weight matrix from layer 0 to 1
   double fWeightMatrix1to2[1][9];   // weight matrix from layer 1 to 2

};

inline void ReadMLPMinus::Initialize()
{
   // build network structure
   // weight matrix from layer 0 to 1
   fWeightMatrix0to1[0][0] = -1.18823571687521;
   fWeightMatrix0to1[1][0] = 12.0651512471318;
   fWeightMatrix0to1[2][0] = 0.72016334651328;
   fWeightMatrix0to1[3][0] = 5.06434452992559;
   fWeightMatrix0to1[4][0] = -24.1627785647897;
   fWeightMatrix0to1[5][0] = -2.67916556059741;
   fWeightMatrix0to1[6][0] = -0.123315564227041;
   fWeightMatrix0to1[7][0] = 22.7356884121901;
   fWeightMatrix0to1[0][1] = -2.2149927446738;
   fWeightMatrix0to1[1][1] = -6.47373785472743;
   fWeightMatrix0to1[2][1] = -1.53604599429525;
   fWeightMatrix0to1[3][1] = -2.6015201810913;
   fWeightMatrix0to1[4][1] = 11.2657608542095;
   fWeightMatrix0to1[5][1] = -0.167718202272265;
   fWeightMatrix0to1[6][1] = -0.833638886492201;
   fWeightMatrix0to1[7][1] = -11.052248174505;
   fWeightMatrix0to1[0][2] = 1.11833150108507;
   fWeightMatrix0to1[1][2] = 1.84536900923381;
   fWeightMatrix0to1[2][2] = 0.129891117047098;
   fWeightMatrix0to1[3][2] = 0.811656785498521;
   fWeightMatrix0to1[4][2] = -0.880354990015578;
   fWeightMatrix0to1[5][2] = -1.57554260495044;
   fWeightMatrix0to1[6][2] = 1.57378290191702;
   fWeightMatrix0to1[7][2] = 0.602289617042502;
   fWeightMatrix0to1[0][3] = -0.577185806326553;
   fWeightMatrix0to1[1][3] = 3.74567215224631;
   fWeightMatrix0to1[2][3] = 1.64519081003051;
   fWeightMatrix0to1[3][3] = 0.70246234655876;
   fWeightMatrix0to1[4][3] = -10.5941232408768;
   fWeightMatrix0to1[5][3] = -0.473450459709862;
   fWeightMatrix0to1[6][3] = 0.323087853755992;
   fWeightMatrix0to1[7][3] = 9.90074496017678;
   // weight matrix from layer 1 to 2
   fWeightMatrix1to2[0][0] = -2.53374181503195;
   fWeightMatrix1to2[0][1] = 2.29720936277301;
   fWeightMatrix1to2[0][2] = -2.26804383342745;
   fWeightMatrix1to2[0][3] = -0.652721723222071;
   fWeightMatrix1to2[0][4] = -6.78038498079703;
   fWeightMatrix1to2[0][5] = 2.11172370306038;
   fWeightMatrix1to2[0][6] = -3.94034261913044;
   fWeightMatrix1to2[0][7] = 6.40906629537685;
   fWeightMatrix1to2[0][8] = -1.60535480993613;
}

inline double ReadMLPMinus::GetMvaValue__( const std::vector<double>& inputValues ) const
{
   if (inputValues.size() != (unsigned int)3) {
      std::cout << "Input vector needs to be of size " << 3 << std::endl;
      return 0;
   }

   std::array<double, 9> fWeights1 {{}};
   std::array<double, 1> fWeights2 {{}};
   fWeights1.back() = 1.;

   // layer 0 to 1
   for (int o=0; o<8; o++) {
      std::array<double, 4> buffer; // no need to initialise
      for (int i = 0; i<4 - 1; i++) {
         buffer[i] = fWeightMatrix0to1[o][i] * inputValues[i];
      } // loop over i
      buffer.back() = fWeightMatrix0to1[o][3];
      for (int i=0; i<4; i++) {
         fWeights1[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<8; o++) {
      fWeights1[o] = ActivationFnc(fWeights1[o]);
   } // loop over o
   // layer 1 to 2
   for (int o=0; o<1; o++) {
      std::array<double, 9> buffer; // no need to initialise
      for (int i=0; i<9; i++) {
         buffer[i] = fWeightMatrix1to2[o][i] * fWeights1[i];
      } // loop over i
      for (int i=0; i<9; i++) {
         fWeights2[o] += buffer[i];
      } // loop over i
    } // loop over o
   for (int o=0; o<1; o++) {
      fWeights2[o] = OutputActivationFnc(fWeights2[o]);
   } // loop over o

   return fWeights2[0];
}

double ReadMLPMinus::ActivationFnc(double x) const {
   // fast hyperbolic tan approximation
   if (x > 4.97) return 1;
   if (x < -4.97) return -1;
   float x2 = x * x;
   float a = x * (135135.0f + x2 * (17325.0f + x2 * (378.0f + x2)));
   float b = 135135.0f + x2 * (62370.0f + x2 * (3150.0f + x2 * 28.0f));
   return a / b;
}
double ReadMLPMinus::OutputActivationFnc(double x) const {
   // sigmoid
   return 1.0/(1.0+exp(-x));
}

// Clean up
inline void ReadMLPMinus::Clear()
{
}
inline double ReadMLPMinus::GetMvaValue( const std::vector<double>& inputValues ) const
{
   // classifier response value
   double retval = 0;

   // classifier response, sanity check first
   if (!IsStatusClean()) {
      std::cout << "Problem in class \"" << fClassName << "\": cannot return classifier response"
                << " because status is dirty" << std::endl;
   }
   else {
         std::vector<double> iV(inputValues);
         Transform( iV, -1 );
         retval = GetMvaValue__( iV );
   }

   return retval;
}

//_______________________________________________________________________
inline void ReadMLPMinus::InitTransform_1()
{
   double fMin_1[3][3];
   double fMax_1[3][3];
   // Normalization transformation, initialisation
   fMin_1[0][0] = 0.0156741552055;
   fMax_1[0][0] = 16.4249000549;
   fScal_1[0][0] = 2.0/(fMax_1[0][0]-fMin_1[0][0]);
   fOff_1[0][0] = fMin_1[0][0]*fScal_1[0][0]+1.;
   fMin_1[1][0] = 0;
   fMax_1[1][0] = 11.6820173264;
   fScal_1[1][0] = 2.0/(fMax_1[1][0]-fMin_1[1][0]);
   fOff_1[1][0] = fMin_1[1][0]*fScal_1[1][0]+1.;
   fMin_1[2][0] = 0;
   fMax_1[2][0] = 16.4249000549;
   fScal_1[2][0] = 2.0/(fMax_1[2][0]-fMin_1[2][0]);
   fOff_1[2][0] = fMin_1[2][0]*fScal_1[2][0]+1.;
   fMin_1[0][1] = 0.0115333553404;
   fMax_1[0][1] = 999;
   fScal_1[0][1] = 2.0/(fMax_1[0][1]-fMin_1[0][1]);
   fOff_1[0][1] = fMin_1[0][1]*fScal_1[0][1]+1.;
   fMin_1[1][1] = 0.0118714151904;
   fMax_1[1][1] = 999;
   fScal_1[1][1] = 2.0/(fMax_1[1][1]-fMin_1[1][1]);
   fOff_1[1][1] = fMin_1[1][1]*fScal_1[1][1]+1.;
   fMin_1[2][1] = 0.0115333553404;
   fMax_1[2][1] = 999;
   fScal_1[2][1] = 2.0/(fMax_1[2][1]-fMin_1[2][1]);
   fOff_1[2][1] = fMin_1[2][1]*fScal_1[2][1]+1.;
   fMin_1[0][2] = 0;
   fMax_1[0][2] = 1;
   fScal_1[0][2] = 2.0/(fMax_1[0][2]-fMin_1[0][2]);
   fOff_1[0][2] = fMin_1[0][2]*fScal_1[0][2]+1.;
   fMin_1[1][2] = 0;
   fMax_1[1][2] = 1;
   fScal_1[1][2] = 2.0/(fMax_1[1][2]-fMin_1[1][2]);
   fOff_1[1][2] = fMin_1[1][2]*fScal_1[1][2]+1.;
   fMin_1[2][2] = 0;
   fMax_1[2][2] = 1;
   fScal_1[2][2] = 2.0/(fMax_1[2][2]-fMin_1[2][2]);
   fOff_1[2][2] = fMin_1[2][2]*fScal_1[2][2]+1.;
}

//_______________________________________________________________________
inline void ReadMLPMinus::Transform_1( std::vector<double>& iv, int cls) const
{
   // Normalization transformation
   if (cls < 0 || cls > 2) {
   if (2 > 1 ) cls = 2;
      else cls = 2;
   }
   const int nVar = 3;

   // get indices of used variables

   // define the indices of the variables which are transformed by this transformation
   static std::vector<int> indicesGet;
   static std::vector<int> indicesPut;

   if ( indicesGet.empty() ) {
      indicesGet.reserve(fNvars);
      indicesGet.push_back( 0);
      indicesGet.push_back( 1);
      indicesGet.push_back( 2);
   }
   if ( indicesPut.empty() ) {
      indicesPut.reserve(fNvars);
      indicesPut.push_back( 0);
      indicesPut.push_back( 1);
      indicesPut.push_back( 2);
   }

   static std::vector<double> dv;
   dv.resize(nVar);
   for (int ivar=0; ivar<nVar; ivar++) dv[ivar] = iv[indicesGet.at(ivar)];
   for (int ivar=0;ivar<3;ivar++) {
      double offset = fOff_1[cls][ivar];
      double scale  = fScal_1[cls][ivar];
      iv[indicesPut.at(ivar)] = scale*dv[ivar]-offset;
   }
}

//_______________________________________________________________________
inline void ReadMLPMinus::InitTransform()
{
   InitTransform_1();
}

//_______________________________________________________________________
inline void ReadMLPMinus::Transform( std::vector<double>& iv, int sigOrBgd ) const
{
   Transform_1( iv, sigOrBgd );
}
